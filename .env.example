# Logging Configuration
LOG_LEVEL=info # (e.g., trace, debug, info, warn, error, fatal)

# Server Configuration
PORT=3000

# Google Drive API Credentials
# Option 1: Path to credentials.json file (if server.js uses this directly)
# GOOGLE_APPLICATION_CREDENTIALS=./credentials.json
# Option 2: Raw JSON content (if server.js is adapted to parse this, as suggested by render.yaml)
# GOOGLE_CREDENTIALS='{"type": "service_account", "project_id": "...", ...}'

# Groq API Key
GROQ_API_KEY=your_groq_api_key_here

# Service Specific Credentials (examples, adapt as needed)
# These might be actual API keys, or login details for UI automation.
# For UI automation, consider if these are better handled by interactive login
# during the first run, with sessions saved by BaseAIService.

# Example for a service requiring API key:
# SOME_SERVICE_API_KEY=your_api_key

# Example for UI automation login (if not handled by interactive first run):
# CLAUDE_EMAIL=user@example.com
# CLAUDE_PASSWORD=yourpassword

# YOUTUBE_EMAIL=user@example.com
# YOUTUBE_PASSWORD=yourpassword

# Note: For UI automation services, it's often more secure and flexible
# to perform a manual login in a headed browser once, let BaseAIService
# save the session, and then run headless. Storing passwords in .env
# for UI logins should be done with caution and awareness of security implications.

# Supabase Configuration
SUPABASE_URL=your_supabase_project_url_here
SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Telegram Bot for Admin Notifications
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_ADMIN_CHAT_ID=your_admin_chat_id_here

# Payment Configuration
MERCHANT_SOLANA_WALLET=your_merchant_solana_wallet_address_here
SOLANA_WEBHOOK_SECRET=a_very_strong_random_secret_for_webhook_auth
# SOLANA_RPC_URL=https://api.mainnet-beta.solana.com (if doing direct chain checks, not for this step)
